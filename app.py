import re
import os
import aiohttp
from fake_useragent import UserAgent
import logging
import asyncio
import json
import time
import uuid
import openai_async
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import Throttled
from aiogram.dispatcher import FSMContext
import requests
import db
from PIL import Image

bot = Bot(token="") #—Ç—É—Ç —Ç–æ–∫–µ–Ω
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

async def anti_flood_gpt(*args, **kwargs):
    message = args[0]
    await message.reply("–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑ –≤ 25 —Å–µ–∫—É–Ω–¥!")
    pass

async def anti_flood(*args, **kwargs):
    message = args[0]
    pass
    
@dp.message_handler(commands="start")
@dp.throttled(anti_flood,rate=3)
async def start(message: types.Message):
    if message.chat.type == 'private':
        check_fun = db.get_status_work('start')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç!")
        else:
            print(f"[LOG] - id[{message.from_user.id}] –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /start")
            result = db.check_ban_user(message.from_user.id)
            print(f"[LOG] - id[{message.from_user.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω")
            if str(result[0]) == '0':
                await bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç ChatGPT —Å–æ–∑–¥–∞–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @CTOHKC")
            else:
                await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
    else:
        pass
   
@dp.message_handler(commands="balaboba")
async def balaboba(message: types.Message):
    if message.chat.type != 'private':
        check_fun = db.get_status_work('balaboba')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç!")
        else:
            result = db.check_ban_user(message.from_user.id)
            result2 = db.check_ban_chat(message.chat.id)
            if str(result[0]) != '1' and (result2[0]) != '1':
                if message.get_args():
                    print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /balaboba text[{message.get_args()}]")
                    try:
                        headers = {
                            'Content-Type': 'application/json',
                            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 11_4) AppleWebKit/605.1.15 '
                                          '(KHTML, like Gecko) Version/14.1.1 Safari/605.1.15',
                            'Origin': 'https://yandex.ru',
                            'Referer': 'https://yandex.ru/',
                        }

                        API_URL = 'https://zeapi.yandex.net/lab/api/yalm/text3'
                        payload = {"query": f"{message.get_args()}", "intro": 0, "filter": 1}
                        async with aiohttp.ClientSession() as session:
                            async with session.post(API_URL, json=payload, headers=headers) as response:
                                result = await response.json()
                                if result['text'] != "":
                                    await message.reply(f"Balaboba: {result['text']}")
                                else:
                                    await message.reply(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞—Ç –∏–ª–∏ –Ω–∞—Ä—É—à–∏–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
                    except Exception as er:
                        await message.reply(f"–û—à–∏–±–∫–∞: {er}")
                else:
                    await message.reply(f"–Ø –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—éüò°")
                    
            elif str(result2[0]) == '1':
                try:
                    await message.reply(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
            elif str(result[0]) == '1':
                try:
                    await message.reply(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
   
@dp.message_handler(commands="status")
@dp.throttled(anti_flood,rate=3)
async def dreams(message: types.Message):
    if message.chat.type != 'private':
        result = db.check_ban_user(message.from_user.id)
        result2 = db.check_ban_chat(message.chat.id)
        if str(result[0]) != '1' and (result2[0]) != '1':
            results = db.count()
            if results >= 1:
                stat_work = "–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
            if results == 0:
                stat_work = "–í—Å–µ –ø–ª–æ—Ö–æ!"
            await message.reply(f"<b>–°—Ç–∞—Ç—É—Å:</b> {stat_work}\n<b>–í—Å–µ–≥–æ –∫–ª—é—á–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:</b> {results}", parse_mode="HTML")
   
@dp.message_handler(commands="dream")
@dp.throttled(anti_flood,rate=3)
async def dreams(message: types.Message):
    if message.chat.type != 'private':
        check_fun = db.get_status_work('dream')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç!")
        else:
            result = db.check_ban_user(message.from_user.id)
            result2 = db.check_ban_chat(message.chat.id)
            if str(result[0]) != '1' and (result2[0]) != '1':
                if message.get_args():
                    print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /dream text[{message.get_args()}]")
                    try:
                        limits = db.get_limit_dream(message.chat.id)
                        if int(limits)+1 <= len(message.get_args()):
                            await message.reply(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ {str(limits)} —Å–∏–º–≤–æ–ª–æ–≤!")
                            pass
                        else:
                            for i in range(5):
                                try:
                                    random_uuid = uuid.uuid4()
                                    uuid_str = str(random_uuid).replace('-', '')
                                    formatted_uuid = f"{uuid_str[0:8]}-{uuid_str[8:12]}-{uuid_str[12:16]}-{uuid_str[16:20]}-{uuid_str[20:]}"
                                    user_agent = UserAgent()
                                    random_user_agent = user_agent.random
                                    print(random_user_agent)

                                    headers = {
                                        'Accept': '*/*',
                                        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                                        'Connection': 'keep-alive',
                                        'Content-Type': 'application/json',
                                        'Origin': 'https://dreaminterpreter.ai',
                                        'Referer': 'https://dreaminterpreter.ai/',
                                        'Sec-Fetch-Dest': 'empty',
                                        'Sec-Fetch-Mode': 'cors',
                                        'Sec-Fetch-Site': 'cross-site',
                                        'User-Agent': f'{random_user_agent}',
                                        'country': 'RU',
                                        'language': 'ru',
                                        'sec-ch-ua': '"Chromium";v="112", "Not_A Brand";v="24", "Opera";v="98"',
                                        'sec-ch-ua-mobile': '?0',
                                        'sec-ch-ua-platform': '"Windows"',
                                        'uid': f'{formatted_uuid}',
                                    }

                                    json_data = {
                                        'dream': f'{message.get_args()}',
                                        'lat': None,
                                        'long': None,
                                    }
                                    
                                    async with aiohttp.ClientSession(headers=headers) as session:
                                        async with session.post('https://dream-interpreter-ai.herokuapp.com/dream', json=json_data) as response:
                                            result = await response.json()
                                            await message.reply(f"{result['dream']['interpretation']}")
                                            return
                                            break
                                except Exception as er:
                                    print(f"[ERROR] - {er}")
                                    continue
                            await message.reply(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!\n–° —á–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ:\n1.–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\n2.–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞\n3.–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                else:
                    await message.reply(f"–Ø –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—éüò°")
                    
            elif str(result2[0]) == '1':
                try:
                    await message.reply(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
            elif str(result[0]) == '1':
                try:
                    await message.reply(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
                    
                    
@dp.message_handler(commands="img")
@dp.throttled(anti_flood,rate=3)
async def img(message: types.Message):
    if message.chat.type != 'private':
        check_fun = db.get_status_work('img')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç!")
        else:
            result = db.check_ban_user(message.from_user.id)
            result2 = db.check_ban_chat(message.chat.id)
            if str(result[0]) != '1' and (result2[0]) != '1':
                if message.get_args():
                    print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /img text[{message.get_args()}]")
                    try:
                        limits = db.get_limit_img(message.chat.id)
                        if int(limits)+1 <= len(message.get_args()):
                            await message.reply(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ {str(limits)} —Å–∏–º–≤–æ–ª–æ–≤!")
                            pass
                        else:
                            result = await img_generate(message.get_args())
                            if result == 'error':
                                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                                pass
                            if result == 'no key':
                                await message.reply(f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å api –∫–ª—é—á–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /token <key>")
                                pass
                            else:
                                await bot.send_photo(message.chat.id, result, caption=f'–¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {message.get_args()}')
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                        
                else:
                    await message.reply(f"–Ø –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—éüò°")
                    pass
                    
            elif str(result2[0]) == '1':
                try:
                    await message.reply(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
            elif str(result[0]) == '1':
                try:
                    await message.reply(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
        
@dp.message_handler(content_types=["photo"]) #–≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–∞–±–∞–≥–æ–≤–∞–Ω –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
@dp.throttled(anti_flood,rate=3)
async def photo_edit(message):
    if message.chat.type != "private":
        if message.caption and message.caption == "/edit":
            check_fun = db.get_status_work('photo')
            if str(check_fun) == 'no work':
                await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
            elif str(check_fun) == 'off':
                await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç!")
            else:
                print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω")
                result = db.check_ban_user(message.from_user.id)
                result2 = db.check_ban_chat(message.chat.id)
                if str(result[0]) != '1' and (result2[0]) != '1':
                    try:
                        print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /edit")
                        await message.photo[-1].download(f'{message.from_user.id}.jpg')
                        im = Image.open(f'{message.from_user.id}.jpg')
                        new_image = im.resize((1024, 1024))
                        new_image.save(f'{message.from_user.id}.png')
                        result = await edit_photo(image=open(f"{message.from_user.id}.png", 'rb').read(), n=2, size="1024x1024")
                        if result == 'no key':
                            await message.reply(f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å api –∫–ª—é—á–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /token <key>")
                        if result == 'error':
                            await message.reply(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
                        else:
                            await bot.send_photo(message.chat.id, result[0], caption=f'–£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!\n(–§–æ—Ç–æ –±—ã–ª–æ —É–∂–∞—Ç–æ –¥–æ —Ñ–æ—Ä–º–∞—Ç–∞ 1024—Ö1024)')
                        
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                elif str(result2[0]) == '1':
                    try:
                        await message.answer(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                    except:
                        try:
                            await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                        except Exception as er:
                            print(f"[ERROR] - {er}")
                    pass
                elif str(result[0]) == '1':
                    try:
                        await message.answer(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except:
                        try:
                            await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                        except Exception as er:
                            print(f"[ERROR] - {er}")
                pass
        else:
            pass
            
    elif message.caption and "/mailing" in message.caption:
        check = db.check_adm(message.from_user.id)
        if str(check) == '2':
            await message.photo[-1].download(f'mailing_photo.jpg')
            text_mailing = message.caption.replace('/mailing', '')
            msg = await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
            row = db.receive_chats()
            good = 0
            bad = 0
            for result in row:
                with open('mailing_photo.jpg', 'rb') as photos:
                    try:
                        await bot.send_photo(result[1], photos, caption=f'{text_mailing}', parse_mode="HTML")
                        print(f"[MAILING] - id[{result[1]}] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                        good = good + 1
                    except Exception as er:
                        print(f"[MAILING] - id[{result[1]}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è [{er}]")
                        bad = bad + 1
                    await asyncio.sleep(1)
            await msg.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {good}\n‚õîÔ∏è–û—à–∏–±–æ–∫: {bad}")
        
@dp.message_handler(commands="mailing")
@dp.throttled(anti_flood,rate=30)
async def mailing(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '2':
        print(f"[ADMIN] - id[{message.from_user.id}] chat[{message.chat.id}] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /mailing")
        if message.get_args():
            msg = await bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
            row = db.receive_chats()
            print(f'[LOG] - –û—Ç–≤–µ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö [{row}]')
            good = 0
            bad = 0
            progress = len(row)
            for result in row:
                try:
                    await bot.send_message(result[1], f'{message.get_args()}', parse_mode="HTML")
                    print(f"[MAILING] - id[{result[1]}] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    good = good + 1
                except Exception as er:
                    print(f"[MAILING] - id[{result[1]}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è error[{er}]")
                    bad = bad + 1
                await asyncio.sleep(1)
            await msg.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n‚úÖ–£—Å–ø–µ—à–Ω–æ: {good}\n‚õîÔ∏è–û—à–∏–±–æ–∫: {bad}")
                
        else:
            await bot.send_message(message.chat.id, '–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
            pass
    else:
        pass
        
@dp.message_handler(commands="set_func")
@dp.throttled(anti_flood,rate=3)
async def set_limit(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '2':
        if message.chat.type != 'private':
            try:
                result = db.set_status_work(f'{message.get_args()}')
                if result == 'off':
                    await message.reply(f"–§—É–Ω–∫—Ü–∏—è {message.get_args()} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã!")
                elif result == 'on':
                    await message.reply(f"–§—É–Ω–∫—Ü–∏—è {message.get_args()} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º!")
                elif result == 'error':
                    await message.reply(f"–û—à–∏–±–∫–∞!")
            except Exception as er:
                print(f'[ERROR] - {er}')
    else:
        pass
        
@dp.message_handler(commands="set_limit")
@dp.throttled(anti_flood,rate=3)
async def set_limit(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '2' or str(check) == '1':
        if message.chat.type != 'private':
            try:
                types = message.get_args().split(' ')[0] #–õ—é–±–ª—é –∞–Ω—é
                limit = message.get_args().split(' ')[1]
                if int(limit) >= 3001:
                    await bot.send_message(message.chat.id, f"–ú–∞–∫—Å–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ 3000!")
                else:
                    result = db.edit_limit(message.chat.id, types, int(limit))
                    if result == 'good':
                        await bot.send_message(message.chat.id, f"–õ–∏–º–∏—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!")
                    else:
                        await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤!")
            except Exception as er:
                await bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤!")
                print(f"[ERROR] - {er}")
    else:
        pass
   
@dp.message_handler(commands="token")
@dp.throttled(anti_flood,rate=3)
async def token(message: types.Message):
    if message.chat.type != 'private':
        check_fun = db.get_status_work('token')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç")
        else:
            print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω")
            result = db.check_ban_user(message.from_user.id)
            result2 = db.check_ban_chat(message.chat.id)
            if str(result[0]) != '1' and (result2[0]) != '1':
                if message.get_args():
                    regex = r'sk-[a-zA-Z0-9]{48}'
                    matches = re.findall(regex, message.get_args())
                    msg_check = await bot.send_message(message.chat.id, f"–ù–∞—á–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É...")
                    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
                    for match in matches:
                        try:
                            response = await openai_async.complete(f"{match}", timeout=2, payload={"model": "text-davinci-002", "prompt": "What is the capital of France?"})
                            check = response.json()["choices"][0]["text"].strip()
                            db.add_token(match)
                            text = text + f"[‚úÖ] {match[:8]}******** - –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        except Exception as er:
                            try:
                                error = response.json()["error"]["message"]
                                text = text + f"[‚õîÔ∏è]{match[:8]}******** - –û—à–∏–±–∫–∞: {error}!\n\n"
                            except:
                                text = text + f"[‚õîÔ∏è]{match[:8]}******** - –û—à–∏–±–∫–∞!\n"
                        await msg_check.edit_text(text)
                else:
                    await message.answer(f"–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")
            elif str(result2[0]) == '1':
                try:
                    await message.answer(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
            elif str(result[0]) == '1':
                try:
                    await message.answer(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
    else:
        pass 
            
@dp.message_handler(commands="chat")
@dp.throttled(anti_flood,rate=3)
async def chat(message: types.Message):
    if message.chat.type != 'private':
        check_fun = db.get_status_work('chat')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç")
        else:
            print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω")
            result = db.check_ban_user(message.from_user.id)
            result2 = db.check_ban_chat(message.chat.id)
            if str(result[0]) != '1' and (result2[0]) != '1':
                if message.get_args():
                    limits = db.get_limit_chat(message.chat.id)
                    if int(limits)+1 <= len(message.get_args()):
                        await message.reply(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ {str(limits)} —Å–∏–º–≤–æ–ª–æ–≤!")
                        pass
                    else:
                        work = await chat_respons(message.get_args())
                        print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞ text[{message.get_args()}]")
                        if work == 'no key':
                            await message.reply(f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å api –∫–ª—é—á–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /token <key>")
                            pass
                        else:
                            await message.reply(f"ChatGPT: {work}")
                else:
                    await message.reply(f"–Ø –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—éüò°")
            elif str(result2[0]) == '1':
                try:
                    await message.reply(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
            elif str(result[0]) == '1':
                try:
                    await message.reply(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
    else:
        pass
        
@dp.message_handler(commands="gpt")
@dp.throttled(anti_flood_gpt,rate=25)
async def gpt_chat(message: types.Message):
    if message.chat.type != 'private':
        check_fun = db.get_status_work('gpt')
        if str(check_fun) == 'no work':
            await message.reply(f"–£ –±–æ—Ç–∞ –æ—Ç–ø—É—Å–∫üèïüåÖüõ∂!\n(–¢–µ—Ö –†–∞–±–æ—Ç—ã)")
        elif str(check_fun) == 'off':
            await message.reply(f"–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö —Ä–∞–±–æ—Ç")
        else:
            print(f"[LOG] - id[{message.from_user.id}] chat[{message.chat.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω")
            result = db.check_ban_user(message.from_user.id)
            result2 = db.check_ban_chat(message.chat.id)
            if str(result[0]) != '1' and (result2[0]) != '1':
                if message.get_args():
                    limits = db.get_limit_chat(message.chat.id)
                    if int(limits)+1 <= len(message.get_args()):
                        await message.reply(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ {str(limits)} —Å–∏–º–≤–æ–ª–æ–≤!")
                        pass
                    else:
                        work = await gpt(message.get_args())
                        if work == 'no key':
                            await message.reply(f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å api –∫–ª—é—á–∏!\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /token <key>")
                            pass
                        else:
                            await message.reply(f"ChatGPT: {work}")
                else:
                    await message.reply(f"–Ø –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—éüò°")
            elif str(result2[0]) == '1':
                try:
                    await message.reply(f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTPHKC")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í–∞—à —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n–≠—Ç–æ –æ—à–∏–±–∫–∞? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @CTOHKC!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
            elif str(result[0]) == '1':
                try:
                    await message.reply(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                except:
                    try:
                        await bot.send_message(message.chat.id, f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
                    except Exception as er:
                        print(f"[ERROR] - {er}")
                pass
    else:
        pass
    
@dp.message_handler(commands="cfg")
@dp.throttled(anti_flood,rate=3)
async def cfg(message: types.Message):
    if message.chat.type != 'private':
        limits_chat = db.get_limit_chat(message.chat.id)
        limits_img = db.get_limit_img(message.chat.id)
        limits_dream = db.get_limit_dream(message.chat.id)
        ban = db.check_ban_chat(message.chat.id)
        if str(ban[0]) == "1":
            status = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        else:
            status = "–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await bot.send_message(message.chat.id, f"<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞</b>\n\n<b>–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞:</b> <code>{message.chat.id}</code>\n<b>–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ /chat:</b> <code>{limits_chat}</code>\n<b>–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ /img:</b> <code>{limits_img}</code>\n<b>–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ /dream:</b> <code>{limits_dream}</code>\n<b>–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> <code>{status}</code>", parse_mode="HTML")
    else:
        pass
    
@dp.message_handler(commands="delmoder")
@dp.throttled(anti_flood,rate=3)
async def del_moder(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '2':
        try:
            target = message.reply_to_message.from_user.id
        except:
            try:
                target = message.get_args()
            except Exception as er:
                print(f"[ERROR] - {er}")
                pass
        result = db.del_moderator(target)
        if result == 'good':
            await message.reply(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏!")
        if result == 'bad':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–ª—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!")
        print(f"[ADMIN] - id[{message.from_user.id}] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Å –∫–æ–Ω—Ñ—ã –Ω–∞ —é–∑–µ—Ä–µ [{target}]")
    if str(check) == '1':
        print(f"[ADMIN] - id[{message.from_user.id}] –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞ [{target}]")
        await message.reply(f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
    else:
        pass
    
@dp.message_handler(commands="addmoder")
@dp.throttled(anti_flood,rate=3)
async def add_moder(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '2':
        try:
            target = message.reply_to_message.from_user.id
        except:
            try:
                target = message.get_args()
            except Exception as er:
                print(f"[ERROR] - {er}")
                pass
        result = db.add_moderator(target)
        if result == 'good':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ—Å—Ç–∞–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏!")
        if result == 'already':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!")
        print(f"[ADMIN] - id[{message.from_user.id}] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–Ω—Ñ—É –Ω–∞ —é–∑–µ—Ä–µ [{target}]")
    if str(check) == '1':
        print(f"[ADMIN] - id[{message.from_user.id}] –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º [{target}]")
        await message.reply(f"–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")
    else:
        pass
        
@dp.message_handler(commands="ban")
@dp.throttled(anti_flood,rate=3)
async def ban(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '1' or str(check) == '2':
        try:
            target = message.reply_to_message.from_user.id
        except:
            try:
                target = message.get_args()
            except Exception as er:
                print(f"[ERROR] - {er}")
        result = db.ban(target)
        if result == 'no user':
            await message.reply(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞!")
        if result == 'good':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        if result == 'admin':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞–¥–º–∏–Ω —Å–æ—Å—Ç–∞–≤–∞!")
        if result == 'already':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
        print(f"[ADMIN] - id[{message.from_user.id}] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–∞–Ω –Ω–∞ —é–∑–µ—Ä–∞ [{target}]")
    else:
        pass
        
@dp.message_handler(commands="unban")
@dp.throttled(anti_flood,rate=3)
async def unban(message: types.Message):
    check = db.check_adm(message.from_user.id)
    if str(check) == '1' or str(check) == '2':
        try:
            target = message.reply_to_message.from_user.id
        except:
            try:
                target = message.get_args()
            except Exception as er:
                print(f"[ERROR] - {er}")
        result = db.unban(target)
        if result == 'no user':
            await message.reply(f"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞!")
        if result == 'good':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
        if result == 'admin':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞–¥–º–∏–Ω —Å–æ—Å—Ç–∞–≤–∞!")
        if result == 'already':
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!")
        print(f"[ADMIN] - id[{message.from_user.id}] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ä–∞–∑–±–∞–Ω –Ω–∞ —é–∑–µ—Ä–∞ [{target}]")
    else:
        pass

async def img_generate(text):
    print(f"[LOG] - –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –≤ –æ–ø–µ–Ω–ê–∏ /img")
    while True:
        keys = db.get_key()
        if keys == 'no key':
            return 'no key'
            break
        response = await openai_async.generate_img(
            f"{keys}",
            timeout=30,
            payload={
                "prompt": f"{text}",
                "n": 1
            },
        )
        try:
            print(f"[LOG] - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"[LOG] - {response.json()}")
            return response.json()['data'][0]['url']
            break
        except Exception as er:
            print(f"[ERROR] - ({er})")
            error = response.json()["error"]["message"]
            print(f'[ERROR] - text[{error}]')
            if "You exceeded your current quota, please check your plan and billing details." in str(error):
                db.del_key(keys)
            elif "Incorrect API key provided" in str(error):
                db.del_key(keys)
            else:
            	return f"error"
    

async def edit_photo(image: bytes, n: int = 2, size: str = "1024x1024") -> list:
    print(f"[LOG] - –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –≤ –æ–ø–µ–Ω–ê–∏ edit")
    while True:
        try:
            keys = db.get_key()
            if keys == 'no key':
                return 'no key'
                break
            async with aiohttp.ClientSession() as session:
                res = await session.post(
                    url="https://api.openai.com/v1/images/variations",
                    headers={
                        "Authorization": f"Bearer {keys}"
                    },
                    data={
                        "image": image,
                        "size": size,
                        "n": str(n)
                    }
                )
                return [img['url'] for img in (await res.json())['data']]
        except:
            return 'error'
        

async def gpt(text):
    print(f"[LOG] - –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –≤ –æ–ø–µ–Ω–ê–∏ gpt")
    while True:
        keys = db.get_key()
        if keys == 'no key':
            return 'no key'
            break
        print(f"[LOG] - –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –ø–æ –∫–ª—é—á—É {keys}")
        chat_response = await openai_async.chat_complete(
            f"{keys}",
            timeout=130,
            payload={
                "model": "gpt-3.5-turbo",
                "messages": [{"role": "user", "content": f"{text}"}],
                },
            )
        try:
            print(f"[LOG] - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"[LOG] - {chat_response.json()}")
            result_resp = chat_response.json()["choices"][0]["message"]
            return result_resp['content']
            break
        except Exception as er:
            print(f"[ERROR] - ({er})")
            error = chat_response.json()["error"]["message"]
            print(f'[ERROR] - text[{error}]')
            if "You exceeded your current quota, please check your plan and billing details." in str(error):
                db.del_key(keys)
            elif "Incorrect API key provided" in str(error):
                db.del_key(keys)
            else:
            	return f"–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞!\n(–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ –Ω–æ—Ä–º–∞)"

async def chat_respons(text):
    print(f"[LOG] - –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –≤ –æ–ø–µ–Ω–ê–∏")
    while True:
        keys = db.get_key()
        if keys == 'no key':
            return 'no key'
            break
        print(f"[LOG] - –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –ø–æ –∫–ª—é—á—É {keys}")
        chat_response = await openai_async.complete(
            f"{keys}",
            timeout=130,
            payload={
                "model": "text-davinci-003",
                'max_tokens': 2400,
                "prompt": f"{text}",
                'n': 1,
                "temperature": 0.2,
                },
            )
        try:
            print(f"[LOG] - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(f"[LOG] - {chat_response.json()}")
            result_resp = chat_response.json()["choices"][0]["text"].strip()
            return result_resp
            break
        except Exception as er:
            print(f"[ERROR] - ({er})")
            error = chat_response.json()["error"]["message"]
            print(f'[ERROR] - text[{error}]')
            if "You exceeded your current quota, please check your plan and billing details." in str(error):
                db.del_key(keys)
            elif "Incorrect API key provided" in str(error):
                db.del_key(keys)
            else:
            	return f"–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞: {er}"
        
while True:
    try:
        if __name__ == "__main__":
            executor.start_polling(dp, skip_updates=True)
        break
    except:
        print("–û—à–∏–∫–∞.\n–û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ 20 —Å–µ–∫...")
        time.sleep(20)
